// from : https://www.youtube.com/watch?v=k5E2AVpwsko&t=0s

Angular : A framework for building client applications in HTML, CSS, and 
JavaScript/TypeScript

Benefits:
- gives our applications a clean structure (loosely coupled, easy to
understand and maintain)
- includes a lot of re-usable code (utility method (eg: navigation and browser history))
- makes applications more testable (automation)

architecture: 
-front end (User Interface (UI)) (HTML, CSS, TypeScript, Angular) :
HTML templates & presentation logic
-back-end (Data and processing) Webserver : Data + APIs : Business logic

HTTP Services / APIs - Endpoints that are accessible via the HTTP protocol

TypeScript : compiles in JavaScript

Node : run time environment to execute JS outside the browser.
install Node
check Node version: node --version

Node Package Manager (NPM): tool in node to install external libraries

Angular CLI : tool to create new angular project, generate some boilerplate code, create deployable packages

install Angular CLI: npm install -g @angular/cli

check Angular version: ng --version

create new project: ng new <project name>

shift + ctrl + p => install command palette in VSCode
>code ==> Shell Command: Install 'code' command in PATH
execute code .create

cd to created project
load our application in a webserver: ng serve
Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/

Basic structure of an application:
    -e2e : end-to-end test (not available in latest versions)
    -node_modules : third party libraries this module depends on. parts of third party libraries used are
    put into a bundle and deployed in an application server. this will not be deployed 
    -src : where src exists
        -app : modules and components are available inside this. There should be at least one component
               and one module
        -assets : static assets (Eg: image file, text file, icon)
        -environments : configurations for different environments. one for production and another for development environment
        -index.html : references for css and scripts are dynamically inserted into the page
        -main.ts : typescript file - starting point of the application (just like in Java and C: main method)
            bootstrapping the main module of a application. Angular loads (AppModule) and gets execute program
        -polyfills.ts : import scripts required to running in Angular.
            Angular framework uses the features of JavaScript that are not available in the current version of JavaScript supported in most browsers out there. It is used to fill the gap of features of JS Angular needs and the features of JS browser supports.
        -style.css : Global styles for application. Other than this, each component can have its own styles.
        -test.ts : used to setting up a testing environment
    -angular.json : configuration file for angular cli - standard
    -editorconfig : to make sure all the developers in the team uses same editor configuration
    -gitignore : to exclude certain folders and files from git repository
    -karma.conf.js : a test runner for javascript
    -package.json : a standard file with every node project.
        basic settings of name and the version of the application
        dependencies : libraries your application dependant upon
            @angular/animations : if no animation in your project, it can be deleted
        devDependencies : not used to run. used to develop an application
        protractor.conf.js : tool to run an end to end test for Angular (not available in latest versions)
        tsconfig.json : contains bunch of settings for TypeScript compiler. TypeScript compiler will
            check this file and compile the TypeScript code to JS, based on the settings in this file, to 
            be understood by browsers
        tslint.json : settings for tslint (not available in latest versions) - static analysis tool for
            TypeScript code (just like SonarLint for Java). check TS code for readability, maintainability
            and functionality errors

Compilation:
    vendor.js : includes all the third party libraries
    polyfills.js : filling the gaps
    main.js : sourcecode of application
    styles.css : style sheets

Hot Module Replacement (HMR) : When sourcecode gets modifying, web-pack automatically refreshes the browser.

inspecting html page : generated bundles are added as <script src="main.js" defer=""></script>
to index.html. This happens runtime. web-pack automatically injects its generated scripts to index.html.
All the css files are bundled into js file.

Angular libraries: (distributed as separate node packages via npm)
    @angular/core - use in every application
    @angular/compiler - to generate js bundles
    @angular/http - to call http services
    @angular/router - to add navigation to applications

AngularJS (first generation (1.x) - written in JS - will be faded sooner)
Angular2 => (with Typescript. JS part of the name was dropped then. no Angular3 (to have 
    same versions for core, compiler, http and router skipped Angular3 & released Angular4
    with same version of those libraries))

Levels of Angular knowledge:
    -Essentials :
        -Fundamentals of TypeScript and object-oriented programming
        -Angular Fundamentals
        -Displaying data and handling events
        -Components
        -Directives
        -Template-driven forms
        -Reactive forms
        -Consuming HTTP services
        -Routing and navigation
        -Authentication and authorization
        -Deployment
        -Building real-time, serverless applications with Firebase 
    
    -Advanced Topics :
        -Animations
        -Angular Material
        -Redux
        -Unit testing
        -Integration testing

TypeScript : written using JS and having extra features
    which are not supported by most of the current
    browsers. SuperSet of JS (any JS can be run in TypeScript)

    features:
        -strong or static typing 
            (optional in TypeScript)
            (helps to have predictable and debuggable
            application)
        -object oriented features
            (class, interface & etc)
        -most of the errors can be caught in compile time
        -great tooling (more intelligent editors)

TypeScript code will be transpiled to JavaScript 
to support browsers

install TypeScript : npm install -g typescript

check TypeScript compiler version : tsc --version

create ts file and open it in VSCode : code main.ts

compile TypeScript to JavaScript : tsc main.ts
file named main.js created

when "ng serve" is getting executed, TypeScript compiler is being invoked internally.

run TypeScript file: node main.ts

JS versions:

-ES5 (ECMAScript 5) : supported by all browsers
-ES6 (2015) : ECMAScript 2015
-ES2016
-ES2017

compile and run together: tsc main.ts | node main.js

even though there is compile error, it generates
JS file. because, by default tsc uses ES5. There is no
let keyword in ES5. that's why generating file

concept of enum can be implemented in JavaScript with
function and array. TypeScript makes all those things
easier.

in TypeScript, we have modules, classes, variables, functions are considered as modules if they have
export keyword. in Angular, those are combined into node modules. Those node modules will be considered as
modules. They are imported and used.

Building blocks of an Angular application are component, module,

Component : encapsulates data, HTML template and logic for a view
        example: Udemy site - navigation bar is a component, a course is a component having rating component.
        every Angular application has at least one component, app component or root component. A real world
        Angular application is a tree of components starting from app component.

Module: container for group of releated components. Every Angular application has at least one module, app module.

components usage:
-create, register in a module, add an element in an HTML markup

auto import plugin helps to import components itself

When <courses></courses> is there, angular displays template of the component

